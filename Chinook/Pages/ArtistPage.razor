@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Helpers
@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Artist
@using Chinook.Services.Playlist

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(async () => await UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(async () => await FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" asp-for="SelectedPlaylistOption">
                @foreach (var playlist in Playlists)
                {
                    <option value="@playlist.PlaylistId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind-value="NewPlaylistValue" class="form-control" placeholder="Name for the new playlist">
            <button class="btn btn-success mt-2" @onclick="CreateNewPlaylist">Create Playlist</button>
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [Inject] IPlaylistService PlaylistService { get; set; }
    [Inject] IArtistService ArtistService { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist Artist;
    private List<ClientModels.Playlist> Playlists;
    private List<ClientModels.PlaylistTrack> Tracks;

    private string NewPlaylistValue { get; set; }
    private string SelectedPlaylistOption { get; set; }    
    private ClientModels.PlaylistTrack SelectedTrack;
    private string InfoMessage;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);

        Playlists = await PlaylistService.GetPlaylists();
        Artist = await ArtistService.GetArtistById(ArtistId);
        Tracks = await PlaylistService.GetTracksByArtistId(ArtistId);
    }

    private async Task FavoriteTrack(long trackId)
    {
        var track = GetTrackMap(trackId);
        await PlaylistService.FavoriteTrack(trackId);
        track.IsFavorite = true;

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist {Constants.DefaultFavoriteName}.";
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        var track = GetTrackMap(trackId); 
        await PlaylistService.UnFavoriteTrack(trackId);
        track.IsFavorite = false;

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist {Constants.DefaultFavoriteName}.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = GetTrackMap(trackId);
        PlaylistDialog.Open();
    }

    private async Task CreateNewPlaylist()
    {
        if (Playlists.Any(p => p.Name == NewPlaylistValue))
        {
            InfoMessage = Constants.PlaylistDuplicatedMessage(NewPlaylistValue);
            PlaylistDialog.Close();
            return;
        }

        if (!string.IsNullOrWhiteSpace(NewPlaylistValue))
        {
            var id = await PlaylistService.SaveNewPlaylist(NewPlaylistValue);
            Playlists.Add(new ClientModels.Playlist
                {
                    Name = NewPlaylistValue,
                    PlaylistId = id
                });
            InfoMessage = $"Playlist {NewPlaylistValue} is created";
            PlaylistDialog.Close();
        }
    }

    private void AddTrackToPlaylist()
    {       

        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {NewPlaylistValue ?? SelectedPlaylistOption}.";
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
        NewPlaylistValue = "";
    }

    private ClientModels.PlaylistTrack GetTrackMap(long trackId)
    {
        return Tracks.First(t => t.TrackId == trackId);
    }
}
